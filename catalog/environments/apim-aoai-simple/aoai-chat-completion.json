{
  "openapi": "3.0.0",
  "info": {
    "title": "Azure OpenAI Service API",
    "description": "Azure OpenAI APIs for completions and search",
    "version": "2024-08-01-preview"
  },
  "servers": [
    {
      "url": "https://{endpoint}/openai",
      "variables": {
        "endpoint": {
          "default": "your-resource-name.openai.azure.com"
        }
      }
    }
  ],
  "security": [
    {
      "bearer": [
        "api.read"
      ]
    },
    {
      "apiKey": []
    }
  ],
  "paths": {
    "/deployments/{deployment-id}/chat/completions": {
      "post": {
        "summary": "Creates a completion for the chat message",
        "operationId": "ChatCompletions_Create",
        "parameters": [
          {
            "in": "path",
            "name": "deployment-id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Deployment id of the model which was deployed."
            }
          },
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2024-08-01-preview",
              "description": "api version"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createChatCompletionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/createChatCompletionResponse"
                    },
                    {
                      "$ref": "#/components/schemas/createChatCompletionStreamResponse"
                    }
                  ]
                }
              }
            },
            "headers": {
              "apim-request-id": {
                "description": "Request ID for troubleshooting purposes",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            },
            "headers": {
              "apim-request-id": {
                "description": "Request ID for troubleshooting purposes",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Create a chat completion.": {
            "$ref": "./examples/chat_completions.json"
          },
          "Creates a completion based on Azure Search data and system-assigned managed identity.": {
            "$ref": "./examples/chat_completions_azure_search_minimum.json"
          },
          "Creates a completion based on Azure Search image vector data.": {
            "$ref": "./examples/chat_completions_azure_search_image_vector.json"
          },
          "Creates a completion based on Azure Search vector data, previous assistant message and user-assigned managed identity.": {
            "$ref": "./examples/chat_completions_azure_search_advanced.json"
          },
          "Creates a completion for the provided Azure Cosmos DB.": {
            "$ref": "./examples/chat_completions_cosmos_db.json"
          },
          "Creates a completion for the provided Mongo DB.": {
            "$ref": "./examples/chat_completions_mongo_db.json"
          },
          "Creates a completion for the provided Elasticsearch.": {
            "$ref": "./examples/chat_completions_elasticsearch.json"
          },
          "Creates a completion for the provided Pinecone resource.": {
            "$ref": "./examples/chat_completions_pinecone.json"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "errorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/error"
          }
        }
      },
      "errorBase": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "error": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/errorBase"
          }
        ],
        "properties": {
          "param": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "inner_error": {
            "$ref": "#/components/schemas/innerError"
          }
        }
      },
      "innerError": {
        "description": "Inner error with additional details.",
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/innerErrorCode"
          },
          "content_filter_results": {
            "$ref": "#/components/schemas/contentFilterPromptResults"
          }
        }
      },
      "innerErrorCode": {
        "description": "Error codes for the inner error object.",
        "enum": [
          "ResponsibleAIPolicyViolation"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "InnerErrorCode",
          "modelAsString": true,
          "values": [
            {
              "value": "ResponsibleAIPolicyViolation",
              "description": "The prompt violated one of more content filter rules."
            }
          ]
        }
      },
      "chatCompletionsRequestCommon": {
        "type": "object",
        "properties": {
          "temperature": {
            "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\nWe generally recommend altering this or `top_p` but not both.",
            "type": "number",
            "minimum": 0,
            "maximum": 2,
            "default": 1,
            "example": 1,
            "nullable": true
          },
          "top_p": {
            "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\nWe generally recommend altering this or `temperature` but not both.",
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "default": 1,
            "example": 1,
            "nullable": true
          },
          "stream": {
            "description": "If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a `data: [DONE]` message.",
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "stop": {
            "description": "Up to 4 sequences where the API will stop generating further tokens.",
            "oneOf": [
              {
                "type": "string",
                "nullable": true
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "nullable": false
                },
                "minItems": 1,
                "maxItems": 4,
                "description": "Array minimum size of 1 and maximum of 4"
              }
            ],
            "default": null
          },
          "max_tokens": {
            "description": "The maximum number of tokens allowed for the generated answer. By default, the number of tokens the model can return will be (4096 - prompt tokens).",
            "type": "integer",
            "default": 4096
          },
          "presence_penalty": {
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
            "type": "number",
            "default": 0,
            "minimum": -2,
            "maximum": 2
          },
          "frequency_penalty": {
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
            "type": "number",
            "default": 0,
            "minimum": -2,
            "maximum": 2
          },
          "logit_bias": {
            "description": "Modify the likelihood of specified tokens appearing in the completion. Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.",
            "type": "object",
            "nullable": true
          },
          "user": {
            "description": "A unique identifier representing your end-user, which can help Azure OpenAI to monitor and detect abuse.",
            "type": "string",
            "example": "user-1234",
            "nullable": false
          }
        }
      },
      "createCompletionRequest": {
        "type": "object",
        "properties": {
          "prompt": {
            "description": "The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.\n\nNote that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.\n",
            "default": "<|endoftext|>",
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "default": "",
                "example": "This is a test."
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "default": "",
                  "example": "This is a test."
                }
              }
            ]
          },
          "best_of": {
            "type": "integer",
            "default": 1,
            "minimum": 0,
            "maximum": 20,
            "nullable": true,
            "description": "Generates `best_of` completions server-side and returns the \"best\" (the one with the highest log probability per token). Results cannot be streamed.\n\nWhen used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return â€“ `best_of` must be greater than `n`.\n\n**Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.\n"
          },
          "echo": {
            "type": "boolean",
            "default": false,
            "nullable": true,
            "description": "Echo back the prompt in addition to the completion\n"
          },
          "frequency_penalty": {
            "type": "number",
            "default": 0,
            "minimum": -2,
            "maximum": 2,
            "nullable": true,
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.\n"
          },
          "logit_bias": {
            "type": "object",
            "x-oaiTypeLabel": "map",
            "default": null,
            "nullable": true,
            "additionalProperties": {
              "type": "integer"
            },
            "description": "Modify the likelihood of specified tokens appearing in the completion.\n\nAccepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](https://platform.openai.com/tokenizer?view=bpe) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.\n\nAs an example, you can pass `{\"50256\": -100}` to prevent the <|endoftext|> token from being generated.\n"
          },
          "logprobs": {
            "type": "integer",
            "minimum": 0,
            "maximum": 5,
            "default": null,
            "nullable": true,
            "description": "Include the log probabilities on the `logprobs` most likely output tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.\n\nThe maximum value for `logprobs` is 5.\n"
          },
          "max_tokens": {
            "type": "integer",
            "minimum": 0,
            "default": 16,
            "example": 16,
            "nullable": true,
            "description": "The maximum number of [tokens](https://platform.openai.com/tokenizer) that can be generated in the completion.\n\nThe token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.\n"
          },
          "n": {
            "type": "integer",
            "minimum": 1,
            "maximum": 128,
            "default": 1,
            "example": 1,
            "nullable": true,
            "description": "How many completions to generate for each prompt.\n\n**Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.\n"
          },
          "presence_penalty": {
            "type": "number",
            "default": 0,
            "minimum": -2,
            "maximum": 2,
            "nullable": true,
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.\n"
          },
          "seed": {
            "type": "integer",
            "minimum": -9223372036854775808,
            "maximum": 9223372036854775807,
            "nullable": true,
            "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.\n\nDeterminism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.\n"
          },
          "stop": {
            "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.\n",
            "default": null,
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "default": "<|endoftext|>",
                "example": "\n",
                "nullable": true
              },
              {
                "type": "array",
                "minItems": 1,
                "maxItems": 4,
                "items": {
                  "type": "string",
                  "example": "[\"\\n\"]"
                }
              }
            ]
          },
          "stream": {
            "description": "Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n",
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "suffix": {
            "description": "The suffix that comes after a completion of inserted text.\n\nThis parameter is only supported for `gpt-3.5-turbo-instruct`.\n",
            "default": null,
            "nullable": true,
            "type": "string",
            "example": "test."
          },
          "temperature": {
            "type": "number",
            "minimum": 0,
            "maximum": 2,
            "default": 1,
            "example": 1,
            "nullable": true,
            "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n\nWe generally recommend altering this or `top_p` but not both.\n"
          },
          "top_p": {
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "default": 1,
            "example": 1,
            "nullable": true,
            "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or `temperature` but not both.\n"
          },
          "user": {
            "type": "string",
            "example": "user-1234",
            "description": "A unique identifier representing your end-user, which can help to monitor and detect abuse.\n"
          }
        },
        "required": [
          "prompt"
        ]
      },
      "createCompletionResponse": {
        "type": "object",
        "description": "Represents a completion response from the API. Note: both the streamed and non-streamed response objects share the same shape (unlike the chat endpoint).\n",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier for the completion."
          },
          "choices": {
            "type": "array",
            "description": "The list of completion choices the model generated for the input prompt.",
            "items": {
              "type": "object",
              "required": [
                "finish_reason",
                "index",
                "logprobs",
                "text"
              ],
              "properties": {
                "finish_reason": {
                  "type": "string",
                  "description": "The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,\n`length` if the maximum number of tokens specified in the request was reached,\nor `content_filter` if content was omitted due to a flag from our content filters.\n",
                  "enum": [
                    "stop",
                    "length",
                    "content_filter"
                  ]
                },
                "index": {
                  "type": "integer"
                },
                "logprobs": {
                  "type": "object",
                  "nullable": true,
                  "properties": {
                    "text_offset": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      }
                    },
                    "token_logprobs": {
                      "type": "array",
                      "items": {
                        "type": "number"
                      }
                    },
                    "tokens": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "top_logprobs": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "number"
                        }
                      }
                    }
                  }
                },
                "text": {
                  "type": "string"
                },
                "content_filter_results": {
                  "$ref": "#/components/schemas/contentFilterChoiceResults"
                }
              }
            }
          },
          "created": {
            "type": "integer",
            "description": "The Unix timestamp (in seconds) of when the completion was created."
          },
          "model": {
            "type": "string",
            "description": "The model used for completion."
          },
          "prompt_filter_results": {
            "$ref": "#/components/schemas/promptFilterResults"
          },
          "system_fingerprint": {
            "type": "string",
            "description": "This fingerprint represents the backend configuration that the model runs with.\n\nCan be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.\n"
          },
          "object": {
            "type": "string",
            "description": "The object type, which is always \"text_completion\"",
            "enum": [
              "text_completion"
            ]
          },
          "usage": {
            "$ref": "#/components/schemas/completionUsage"
          }
        },
        "required": [
          "id",
          "object",
          "created",
          "model",
          "choices"
        ]
      },
      "createChatCompletionRequest": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/chatCompletionsRequestCommon"
          },
          {
            "properties": {
              "messages": {
                "description": "A list of messages comprising the conversation so far. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_format_inputs_to_ChatGPT_models.ipynb).",
                "type": "array",
                "minItems": 1,
                "items": {
                  "$ref": "#/components/schemas/chatCompletionRequestMessage"
                }
              },
              "data_sources": {
                "type": "array",
                "description": "  The configuration entries for Azure OpenAI chat extensions that use them.\n  This additional specification is only compatible with Azure OpenAI.",
                "items": {
                  "$ref": "#/components/schemas/azureChatExtensionConfiguration"
                }
              },
              "frequency_penalty": {
                "type": "number",
                "default": 0,
                "minimum": -2,
                "maximum": 2,
                "nullable": true,
                "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.\n"
              },
              "logit_bias": {
                "type": "object",
                "default": null,
                "nullable": true,
                "additionalProperties": {
                  "type": "integer"
                },
                "description": "Modify the likelihood of specified tokens appearing in the completion.\n\nAccepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.\n"
              },
              "logprobs": {
                "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`.",
                "type": "boolean",
                "default": false,
                "nullable": true
              },
              "top_logprobs": {
                "description": "An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used.",
                "type": "integer",
                "minimum": 0,
                "maximum": 20,
                "nullable": true
              },
              "max_tokens": {
                "description": "The maximum number of [tokens](/tokenizer) that can be generated in the chat completion.\n\nThe total length of input tokens and generated tokens is limited by the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.\n",
                "type": "integer",
                "nullable": true
              },
              "n": {
                "type": "integer",
                "minimum": 1,
                "maximum": 128,
                "default": 1,
                "example": 1,
                "nullable": true,
                "description": "How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs."
              },
              "presence_penalty": {
                "type": "number",
                "default": 0,
                "minimum": -2,
                "maximum": 2,
                "nullable": true,
                "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.\n"
              },
              "response_format": {
                "description": "An object specifying the format that the model must output. Compatible with [GPT-4o](https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/models#gpt-4-and-gpt-4-turbo-models), [GPT-4o mini](https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/models#gpt-4-and-gpt-4-turbo-models), [GPT-4 Turbo](https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/models#gpt-4-and-gpt-4-turbo-models) and all [GPT-3.5](https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/models#gpt-35) Turbo models newer than `gpt-3.5-turbo-1106`.\n\nSetting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which guarantees the model will match your supplied JSON schema.\n\nSetting to `{ \"type\": \"json_object\" }` enables JSON mode, which guarantees the message the model generates is valid JSON.\n\n**Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.\n",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ResponseFormatText"
                  },
                  {
                    "$ref": "#/components/schemas/ResponseFormatJsonObject"
                  },
                  {
                    "$ref": "#/components/schemas/ResponseFormatJsonSchema"
                  }
                ],
                "x-oaiExpandable": true
              },
              "seed": {
                "type": "integer",
                "minimum": -9223372036854775808,
                "maximum": 9223372036854775807,
                "nullable": true,
                "description": "This feature is in Beta.\nIf specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.\nDeterminism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.\n"
              },
              "stop": {
                "description": "Up to 4 sequences where the API will stop generating further tokens.\n",
                "default": null,
                "oneOf": [
                  {
                    "type": "string",
                    "nullable": true
                  },
                  {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 4,
                    "items": {
                      "type": "string"
                    }
                  }
                ]
              },
              "stream": {
                "description": "If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n",
                "type": "boolean",
                "nullable": true,
                "default": false
              },
              "temperature": {
                "type": "number",
                "minimum": 0,
                "maximum": 2,
                "default": 1,
                "example": 1,
                "nullable": true,
                "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n\nWe generally recommend altering this or `top_p` but not both.\n"
              },
              "top_p": {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "default": 1,
                "example": 1,
                "nullable": true,
                "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or `temperature` but not both.\n"
              },
              "tools": {
                "type": "array",
                "description": "A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.\n",
                "items": {
                  "$ref": "#/components/schemas/chatCompletionTool"
                }
              },
              "tool_choice": {
                "$ref": "#/components/schemas/chatCompletionToolChoiceOption"
              },
              "function_call": {
                "deprecated": true,
                "description": "Deprecated in favor of `tool_choice`.\n\nControls which (if any) function is called by the model.\n`none` means the model will not call a function and instead generates a message.\n`auto` means the model can pick between generating a message or calling a function.\nSpecifying a particular function via `{\"name\": \"my_function\"}` forces the model to call that function.\n\n`none` is the default when no functions are present. `auto` is the default if functions are present.\n",
                "oneOf": [
                  {
                    "type": "string",
                    "description": "`none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.\n",
                    "enum": [
                      "none",
                      "auto"
                    ]
                  },
                  {
                    "$ref": "#/components/schemas/chatCompletionFunctionCallOption"
                  }
                ],
                "x-oaiExpandable": true
              },
              "functions": {
                "deprecated": true,
                "description": "Deprecated in favor of `tools`.\n\nA list of functions the model may generate JSON inputs for.\n",
                "type": "array",
                "minItems": 1,
                "maxItems": 128,
                "items": {
                  "$ref": "#/components/schemas/chatCompletionFunctions"
                }
              },
              "user": {
                "type": "string",
                "example": "user-1234",
                "description": "A unique identifier representing your end-user, which can help to monitor and detect abuse.\n"
              }
            },
            "required": [
              "messages"
            ]
          }
        ]
      },
      "chatCompletionFunctions": {
        "type": "object",
        "deprecated": true,
        "properties": {
          "description": {
            "type": "string",
            "description": "A description of what the function does, used by the model to choose when and how to call the function."
          },
          "name": {
            "type": "string",
            "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
          },
          "parameters": {
            "$ref": "#/components/schemas/FunctionParameters"
          }
        },
        "required": [
          "name"
        ]
      },
      "chatCompletionFunctionCallOption": {
        "type": "object",
        "description": "Specifying a particular function via `{\"name\": \"my_function\"}` forces the model to call that function.\n",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the function to call."
          }
        },
        "required": [
          "name"
        ]
      },
      "chatCompletionFunctionParameters": {
        "type": "object",
        "description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide/](https://learn.microsoft.com/en-us/azure/ai-services/openai/how-to/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.",
        "additionalProperties": true
      },
      "chatCompletionRequestMessage": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/chatCompletionRequestSystemMessage"
          },
          {
            "$ref": "#/components/schemas/chatCompletionRequestUserMessage"
          },
          {
            "$ref": "#/components/schemas/chatCompletionRequestAssistantMessage"
          },
          {
            "$ref": "#/components/schemas/chatCompletionRequestToolMessage"
          },
          {
            "$ref": "#/components/schemas/chatCompletionRequestFunctionMessage"
          }
        ]
      },
      "chatCompletionRequestSystemMessage": {
        "type": "object",
        "title": "System message",
        "properties": {
          "content": {
            "description": "The contents of the system message.",
            "oneOf": [
              {
                "type": "string",
                "description": "The contents of the system message.",
                "title": "Text content"
              },
              {
                "type": "array",
                "description": "An array of content parts with a defined type. For system messages, only type `text` is supported.",
                "title": "Array of content parts",
                "items": {
                  "$ref": "#/components/schemas/chatCompletionRequestSystemMessageContentPart"
                },
                "minItems": 1
              }
            ]
          },
          "role": {
            "type": "string",
            "enum": [
              "system"
            ],
            "description": "The role of the messages author, in this case `system`."
          },
          "name": {
            "type": "string",
            "description": "An optional name for the participant. Provides the model information to differentiate between participants of the same role."
          }
        },
        "required": [
          "content",
          "role"
        ]
      },
      "chatCompletionRequestUserMessage": {
        "type": "object",
        "title": "User message",
        "properties": {
          "content": {
            "description": "The contents of the user message.\n",
            "oneOf": [
              {
                "type": "string",
                "description": "The text contents of the message.",
                "title": "Text content"
              },
              {
                "type": "array",
                "description": "An array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts. Image input is only supported when using the `gpt-4o` model.",
                "title": "Array of content parts",
                "items": {
                  "$ref": "#/components/schemas/chatCompletionRequestUserMessageContentPart"
                },
                "minItems": 1
              }
            ],
            "x-oaiExpandable": true
          },
          "role": {
            "type": "string",
            "enum": [
              "user"
            ],
            "description": "The role of the messages author, in this case `user`."
          },
          "name": {
            "type": "string",
            "description": "An optional name for the participant. Provides the model information to differentiate between participants of the same role."
          }
        },
        "required": [
          "content",
          "role"
        ]
      },
      "chatCompletionRequestAssistantMessage": {
        "type": "object",
        "title": "Assistant message",
        "properties": {
          "content": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "description": "The contents of the assistant message.",
                "title": "Text content"
              },
              {
                "type": "array",
                "description": "An array of content parts with a defined type. Can be one or more of type `text`, or exactly one of type `refusal`.",
                "title": "Array of content parts",
                "items": {
                  "$ref": "#/components/schemas/chatCompletionRequestAssistantMessageContentPart"
                },
                "minItems": 1
              }
            ],
            "description": "The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.\n"
          },
          "refusal": {
            "nullable": true,
            "type": "string",
            "description": "The refusal message by the assistant."
          },
          "role": {
            "type": "string",
            "enum": [
              "assistant"
            ],
            "description": "The role of the messages author, in this case `assistant`."
          },
          "name": {
            "type": "string",
            "description": "An optional name for the participant. Provides the model information to differentiate between participants of the same role."
          },
          "tool_calls": {
            "$ref": "#/components/schemas/chatCompletionMessageToolCalls"
          },
          "function_call": {
            "type": "object",
            "deprecated": true,
            "description": "Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.",
            "nullable": true,
            "properties": {
              "arguments": {
                "type": "string",
                "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."
              },
              "name": {
                "type": "string",
                "description": "The name of the function to call."
              }
            },
            "required": [
              "arguments",
              "name"
            ]
          }
        },
        "required": [
          "role"
        ]
      },
      "chatCompletionRequestToolMessage": {
        "type": "object",
        "title": "Tool message",
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "tool"
            ],
            "description": "The role of the messages author, in this case `tool`."
          },
          "content": {
            "oneOf": [
              {
                "type": "string",
                "description": "The contents of the tool message.",
                "title": "Text content"
              },
              {
                "type": "array",
                "description": "An array of content parts with a defined type. For tool messages, only type `text` is supported.",
                "title": "Array of content parts",
                "items": {
                  "$ref": "#/components/schemas/chatCompletionRequestToolMessageContentPart"
                },
                "minItems": 1
              }
            ],
            "description": "The contents of the tool message."
          },
          "tool_call_id": {
            "type": "string",
            "description": "Tool call that this message is responding to."
          }
        },
        "required": [
          "role",
          "content",
          "tool_call_id"
        ]
      },
      "chatCompletionRequestFunctionMessage": {
        "type": "object",
        "title": "Function message",
        "deprecated": true,
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "function"
            ],
            "description": "The role of the messages author, in this case `function`."
          },
          "content": {
            "nullable": true,
            "type": "string",
            "description": "The contents of the function message."
          },
          "name": {
            "type": "string",
            "description": "The name of the function to call."
          }
        },
        "required": [
          "role",
          "content",
          "name"
        ]
      },
      "chatCompletionRequestSystemMessageContentPart": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/chatCompletionRequestMessageContentPartText"
          }
        ]
      },
      "chatCompletionRequestUserMessageContentPart": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/chatCompletionRequestMessageContentPartText"
          },
          {
            "$ref": "#/components/schemas/chatCompletionRequestMessageContentPartImage"
          }
        ]
      },
      "chatCompletionRequestAssistantMessageContentPart": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/chatCompletionRequestMessageContentPartText"
          },
          {
            "$ref": "#/components/schemas/chatCompletionRequestMessageContentPartRefusal"
          }
        ]
      },
      "chatCompletionRequestToolMessageContentPart": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/chatCompletionRequestMessageContentPartText"
          }
        ]
      },
      "chatCompletionRequestMessageContentPartText": {
        "type": "object",
        "title": "Text content part",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "text"
            ],
            "description": "The type of the content part."
          },
          "text": {
            "type": "string",
            "description": "The text content."
          }
        },
        "required": [
          "type",
          "text"
        ]
      },
      "chatCompletionRequestMessageContentPartImage": {
        "type": "object",
        "title": "Image content part",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "image_url"
            ],
            "description": "The type of the content part."
          },
          "image_url": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "description": "Either a URL of the image or the base64 encoded image data.",
                "format": "uri"
              },
              "detail": {
                "type": "string",
                "description": "Specifies the detail level of the image. Learn more in the [Vision guide](https://learn.microsoft.com/en-us/azure/ai-services/openai/how-to/gpt-with-vision?tabs=rest%2Csystem-assigned%2Cresource#detail-parameter-settings-in-image-processing-low-high-auto).",
                "enum": [
                  "auto",
                  "low",
                  "high"
                ],
                "default": "auto"
              }
            },
            "required": [
              "url"
            ]
          }
        },
        "required": [
          "type",
          "image_url"
        ]
      },
      "chatCompletionRequestMessageContentPartRefusal": {
        "type": "object",
        "title": "Refusal content part",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "refusal"
            ],
            "description": "The type of the content part."
          },
          "refusal": {
            "type": "string",
            "description": "The refusal message generated by the model."
          }
        },
        "required": [
          "type",
          "refusal"
        ]
      },
      "azureChatExtensionConfiguration": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/azureChatExtensionType"
          }
        },
        "description": "  A representation of configuration data for a single Azure OpenAI chat extension. This will be used by a chat\n  completions request that should use Azure OpenAI chat extensions to augment the response behavior.\n  The use of this configuration is compatible only with Azure OpenAI.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "azure_search": "#/components/schemas/azureSearchChatExtensionConfiguration",
            "azure_cosmos_db": "#/components/schemas/azureCosmosDBChatExtensionConfiguration",
            "elasticsearch": "#/components/schemas/elasticsearchChatExtensionConfiguration",
            "mongo_db": "#/components/schemas/mongoDBChatExtensionConfiguration",
            "pinecone": "#/components/schemas/pineconeChatExtensionConfiguration"
          }
        }
      },
      "azureChatExtensionType": {
        "type": "string",
        "description": "  A representation of configuration data for a single Azure OpenAI chat extension. This will be used by a chat\n  completions request that should use Azure OpenAI chat extensions to augment the response behavior.\n  The use of this configuration is compatible only with Azure OpenAI.",
        "enum": [
          "azure_search",
          "azure_cosmos_db",
          "elasticsearch",
          "mongo_db",
          "pinecone"
        ],
        "x-ms-enum": {
          "name": "AzureChatExtensionType",
          "modelAsString": true,
          "values": [
            {
              "name": "azureSearch",
              "value": "azure_search",
              "description": "Represents the use of Azure Search as an Azure OpenAI chat extension."
            },
            {
              "name": "azureCosmosDB",
              "value": "azure_cosmos_db",
              "description": "Represents the use of Azure Cosmos DB as an Azure OpenAI chat extension."
            },
            {
              "name": "elasticsearch",
              "value": "elasticsearch",
              "description": "Represents the use of Elasticsearch® index as an Azure OpenAI chat extension."
            },
            {
              "name": "mongoDB",
              "value": "mongo_db",
              "description": "Represents the use of Mongo DB as an Azure OpenAI chat extension."
            },
            {
              "name": "pinecone",
              "value": "pinecone",
              "description": "Represents the use of Pinecone index as an Azure OpenAI chat extension."
            }
          ]
        }
      },
      "azureSearchChatExtensionConfiguration": {
        "required": [
          "parameters"
        ],
        "description": "A specific representation of configurable options for Azure Search when using it as an Azure OpenAI chat\nextension.",
        "allOf": [
          {
            "$ref": "#/components/schemas/azureChatExtensionConfiguration"
          },
          {
            "properties": {
              "parameters": {
                "$ref": "#/components/schemas/azureSearchChatExtensionParameters"
              }
            }
          }
        ],
        "x-ms-discriminator-value": "azure_search"
      },
      "azureSearchChatExtensionParameters": {
        "required": [
          "authentication",
          "endpoint",
          "index_name"
        ],
        "type": "object",
        "properties": {
          "authentication": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/onYourDataApiKeyAuthenticationOptions"
              },
              {
                "$ref": "#/components/schemas/onYourDataSystemAssignedManagedIdentityAuthenticationOptions"
              },
              {
                "$ref": "#/components/schemas/onYourDataUserAssignedManagedIdentityAuthenticationOptions"
              },
              {
                "$ref": "#/components/schemas/onYourDataAccessTokenAuthenticationOptions"
              }
            ]
          },
          "top_n_documents": {
            "type": "integer",
            "description": "The configured top number of documents to feature for the configured query.",
            "format": "int32"
          },
          "max_search_queries": {
            "type": "integer",
            "description": "The max number of rewritten queries should be send to search provider for one user message. If not specified, the system will decide the number of queries to send.",
            "format": "int32"
          },
          "allow_partial_result": {
            "type": "boolean",
            "default": false,
            "description": "If specified as true, the system will allow partial search results to be used and the request fails if all the queries fail. If not specified, or specified as false, the request will fail if any search query fails."
          },
          "in_scope": {
            "type": "boolean",
            "description": "Whether queries should be restricted to use of indexed data."
          },
          "strictness": {
            "maximum": 5,
            "minimum": 1,
            "type": "integer",
            "description": "The configured strictness of the search relevance filtering. The higher of strictness, the higher of the precision but lower recall of the answer.",
            "format": "int32"
          },
          "endpoint": {
            "type": "string",
            "description": "The absolute endpoint path for the Azure Search resource to use.",
            "format": "uri"
          },
          "index_name": {
            "type": "string",
            "description": "The name of the index to use as available in the referenced Azure Search resource."
          },
          "fields_mapping": {
            "$ref": "#/components/schemas/azureSearchIndexFieldMappingOptions"
          },
          "query_type": {
            "$ref": "#/components/schemas/azureSearchQueryType"
          },
          "semantic_configuration": {
            "type": "string",
            "description": "The additional semantic configuration for the query."
          },
          "filter": {
            "type": "string",
            "description": "Search filter."
          },
          "embedding_dependency": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/onYourDataEndpointVectorizationSource"
              },
              {
                "$ref": "#/components/schemas/onYourDataDeploymentNameVectorizationSource"
              },
              {
                "$ref": "#/components/schemas/onYourDataIntegratedVectorizationSource"
              }
            ]
          },
          "include_contexts": {
            "type": "array",
            "description": "The included properties of the output context. If not specified, the default value is `citations` and `intent`.",
            "items": {
              "$ref": "#/components/schemas/onYourDataContextProperty"
            }
          }
        },
        "description": "Parameters for Azure Search when used as an Azure OpenAI chat extension."
      },
      "azureSearchIndexFieldMappingOptions": {
        "type": "object",
        "properties": {
          "title_field": {
            "type": "string",
            "description": "The name of the index field to use as a title."
          },
          "url_field": {
            "type": "string",
            "description": "The name of the index field to use as a URL."
          },
          "filepath_field": {
            "type": "string",
            "description": "The name of the index field to use as a filepath."
          },
          "content_fields": {
            "type": "array",
            "description": "The names of index fields that should be treated as content.",
            "items": {
              "type": "string"
            }
          },
          "content_fields_separator": {
            "type": "string",
            "description": "The separator pattern that content fields should use."
          },
          "vector_fields": {
            "type": "array",
            "description": "The names of fields that represent vector data.",
            "items": {
              "type": "string"
            }
          },
          "image_vector_fields": {
            "type": "array",
            "description": "The names of fields that represent image vector data.",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Optional settings to control how fields are processed when using a configured Azure Search resource."
      },
      "azureSearchQueryType": {
        "type": "string",
        "description": "The type of Azure Search retrieval query that should be executed when using it as an Azure OpenAI chat extension.",
        "enum": [
          "simple",
          "semantic",
          "vector",
          "vector_simple_hybrid",
          "vector_semantic_hybrid"
        ],
        "x-ms-enum": {
          "name": "AzureSearchQueryType",
          "modelAsString": true,
          "values": [
            {
              "name": "simple",
              "value": "simple",
              "description": "Represents the default, simple query parser."
            },
            {
              "name": "semantic",
              "value": "semantic",
              "description": "Represents the semantic query parser for advanced semantic modeling."
            },
            {
              "name": "vector",
              "value": "vector",
              "description": "Represents vector search over computed data."
            },
            {
              "name": "vectorSimpleHybrid",
              "value": "vector_simple_hybrid",
              "description": "Represents a combination of the simple query strategy with vector data."
            },
            {
              "name": "vectorSemanticHybrid",
              "value": "vector_semantic_hybrid",
              "description": "Represents a combination of semantic search and vector data querying."
            }
          ]
        }
      },
      "azureCosmosDBChatExtensionConfiguration": {
        "required": [
          "parameters"
        ],
        "description": "A specific representation of configurable options for Azure Cosmos DB when using it as an Azure OpenAI chat\nextension.",
        "allOf": [
          {
            "$ref": "#/components/schemas/azureChatExtensionConfiguration"
          },
          {
            "properties": {
              "parameters": {
                "$ref": "#/components/schemas/azureCosmosDBChatExtensionParameters"
              }
            }
          }
        ],
        "x-ms-discriminator-value": "azure_cosmos_db"
      },
      "azureCosmosDBChatExtensionParameters": {
        "required": [
          "authentication",
          "container_name",
          "database_name",
          "embedding_dependency",
          "fields_mapping",
          "index_name"
        ],
        "type": "object",
        "properties": {
          "authentication": {
            "$ref": "#/components/schemas/onYourDataConnectionStringAuthenticationOptions"
          },
          "top_n_documents": {
            "type": "integer",
            "description": "The configured top number of documents to feature for the configured query.",
            "format": "int32"
          },
          "max_search_queries": {
            "type": "integer",
            "description": "The max number of rewritten queries should be send to search provider for one user message. If not specified, the system will decide the number of queries to send.",
            "format": "int32"
          },
          "allow_partial_result": {
            "type": "boolean",
            "default": false,
            "description": "If specified as true, the system will allow partial search results to be used and the request fails if all the queries fail. If not specified, or specified as false, the request will fail if any search query fails."
          },
          "in_scope": {
            "type": "boolean",
            "description": "Whether queries should be restricted to use of indexed data."
          },
          "strictness": {
            "maximum": 5,
            "minimum": 1,
            "type": "integer",
            "description": "The configured strictness of the search relevance filtering. The higher of strictness, the higher of the precision but lower recall of the answer.",
            "format": "int32"
          },
          "database_name": {
            "type": "string",
            "description": "The MongoDB vCore database name to use with Azure Cosmos DB."
          },
          "container_name": {
            "type": "string",
            "description": "The name of the Azure Cosmos DB resource container."
          },
          "index_name": {
            "type": "string",
            "description": "The MongoDB vCore index name to use with Azure Cosmos DB."
          },
          "fields_mapping": {
            "$ref": "#/components/schemas/azureCosmosDBFieldMappingOptions"
          },
          "embedding_dependency": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/onYourDataEndpointVectorizationSource"
              },
              {
                "$ref": "#/components/schemas/onYourDataDeploymentNameVectorizationSource"
              }
            ]
          },
          "include_contexts": {
            "type": "array",
            "description": "The included properties of the output context. If not specified, the default value is `citations` and `intent`.",
            "items": {
              "$ref": "#/components/schemas/onYourDataContextProperty"
            }
          }
        },
        "description": "Parameters to use when configuring Azure OpenAI On Your Data chat extensions when using Azure Cosmos DB for\nMongoDB vCore."
      },
      "azureCosmosDBFieldMappingOptions": {
        "required": [
          "content_fields",
          "vector_fields"
        ],
        "type": "object",
        "properties": {
          "title_field": {
            "type": "string",
            "description": "The name of the index field to use as a title."
          },
          "url_field": {
            "type": "string",
            "description": "The name of the index field to use as a URL."
          },
          "filepath_field": {
            "type": "string",
            "description": "The name of the index field to use as a filepath."
          },
          "content_fields": {
            "type": "array",
            "description": "The names of index fields that should be treated as content.",
            "items": {
              "type": "string"
            }
          },
          "content_fields_separator": {
            "type": "string",
            "description": "The separator pattern that content fields should use."
          },
          "vector_fields": {
            "type": "array",
            "description": "The names of fields that represent vector data.",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Optional settings to control how fields are processed when using a configured Azure Cosmos DB resource."
      },
      "elasticsearchChatExtensionConfiguration": {
        "required": [
          "parameters"
        ],
        "description": "A specific representation of configurable options for Elasticsearch when using it as an Azure OpenAI chat\nextension.",
        "allOf": [
          {
            "$ref": "#/components/schemas/azureChatExtensionConfiguration"
          },
          {
            "properties": {
              "parameters": {
                "$ref": "#/components/schemas/elasticsearchChatExtensionParameters"
              }
            }
          }
        ],
        "x-ms-discriminator-value": "elasticsearch"
      },
      "elasticsearchChatExtensionParameters": {
        "required": [
          "authentication",
          "endpoint",
          "index_name"
        ],
        "type": "object",
        "properties": {
          "authentication": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/onYourDataKeyAndKeyIdAuthenticationOptions"
              },
              {
                "$ref": "#/components/schemas/onYourDataEncodedApiKeyAuthenticationOptions"
              }
            ]
          },
          "top_n_documents": {
            "type": "integer",
            "description": "The configured top number of documents to feature for the configured query.",
            "format": "int32"
          },
          "max_search_queries": {
            "type": "integer",
            "description": "The max number of rewritten queries should be send to search provider for one user message. If not specified, the system will decide the number of queries to send.",
            "format": "int32"
          },
          "allow_partial_result": {
            "type": "boolean",
            "default": false,
            "description": "If specified as true, the system will allow partial search results to be used and the request fails if all the queries fail. If not specified, or specified as false, the request will fail if any search query fails."
          },
          "in_scope": {
            "type": "boolean",
            "description": "Whether queries should be restricted to use of indexed data."
          },
          "strictness": {
            "maximum": 5,
            "minimum": 1,
            "type": "integer",
            "description": "The configured strictness of the search relevance filtering. The higher of strictness, the higher of the precision but lower recall of the answer.",
            "format": "int32"
          },
          "endpoint": {
            "type": "string",
            "description": "The endpoint of Elasticsearch®.",
            "format": "uri"
          },
          "index_name": {
            "type": "string",
            "description": "The index name of Elasticsearch®."
          },
          "fields_mapping": {
            "$ref": "#/components/schemas/elasticsearchIndexFieldMappingOptions"
          },
          "query_type": {
            "$ref": "#/components/schemas/elasticsearchQueryType"
          },
          "embedding_dependency": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/onYourDataEndpointVectorizationSource"
              },
              {
                "$ref": "#/components/schemas/onYourDataDeploymentNameVectorizationSource"
              },
              {
                "$ref": "#/components/schemas/onYourDataModelIdVectorizationSource"
              }
            ]
          },
          "include_contexts": {
            "type": "array",
            "description": "The included properties of the output context. If not specified, the default value is `citations` and `intent`.",
            "items": {
              "$ref": "#/components/schemas/onYourDataContextProperty"
            }
          }
        },
        "description": "Parameters to use when configuring Elasticsearch® as an Azure OpenAI chat extension. "
      },
      "elasticsearchIndexFieldMappingOptions": {
        "type": "object",
        "properties": {
          "title_field": {
            "type": "string",
            "description": "The name of the index field to use as a title."
          },
          "url_field": {
            "type": "string",
            "description": "The name of the index field to use as a URL."
          },
          "filepath_field": {
            "type": "string",
            "description": "The name of the index field to use as a filepath."
          },
          "content_fields": {
            "type": "array",
            "description": "The names of index fields that should be treated as content.",
            "items": {
              "type": "string"
            }
          },
          "content_fields_separator": {
            "type": "string",
            "description": "The separator pattern that content fields should use."
          },
          "vector_fields": {
            "type": "array",
            "description": "The names of fields that represent vector data.",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Optional settings to control how fields are processed when using a configured Elasticsearch® resource."
      },
      "elasticsearchQueryType": {
        "type": "string",
        "description": "The type of Elasticsearch® retrieval query that should be executed when using it as an Azure OpenAI chat extension.",
        "enum": [
          "simple",
          "vector"
        ],
        "x-ms-enum": {
          "name": "ElasticsearchQueryType",
          "modelAsString": true,
          "values": [
            {
              "name": "simple",
              "value": "simple",
              "description": "Represents the default, simple query parser."
            },
            {
              "name": "vector",
              "value": "vector",
              "description": "Represents vector search over computed data."
            }
          ]
        }
      },
      "mongoDBChatExtensionConfiguration": {
        "required": [
          "parameters"
        ],
        "description": "A specific representation of configurable options for Mongo DB when using it as an Azure OpenAI chat\nextension.",
        "allOf": [
          {
            "$ref": "#/components/schemas/azureChatExtensionConfiguration"
          },
          {
            "properties": {
              "parameters": {
                "$ref": "#/components/schemas/mongoDBChatExtensionParameters"
              }
            }
          }
        ],
        "x-ms-discriminator-value": "mongo_db"
      },
      "mongoDBChatExtensionParameters": {
        "required": [
          "authentication",
          "app_name",
          "collection_name",
          "database_name",
          "endpoint",
          "embedding_dependency",
          "fields_mapping",
          "index_name"
        ],
        "type": "object",
        "properties": {
          "authentication": {
            "$ref": "#/components/schemas/onYourDataUsernameAndPasswordAuthenticationOptions"
          },
          "top_n_documents": {
            "type": "integer",
            "description": "The configured top number of documents to feature for the configured query.",
            "format": "int32"
          },
          "max_search_queries": {
            "type": "integer",
            "description": "The max number of rewritten queries should be send to search provider for one user message. If not specified, the system will decide the number of queries to send.",
            "format": "int32"
          },
          "allow_partial_result": {
            "type": "boolean",
            "default": false,
            "description": "If specified as true, the system will allow partial search results to be used and the request fails if all the queries fail. If not specified, or specified as false, the request will fail if any search query fails."
          },
          "in_scope": {
            "type": "boolean",
            "description": "Whether queries should be restricted to use of indexed data."
          },
          "strictness": {
            "maximum": 5,
            "minimum": 1,
            "type": "integer",
            "description": "The configured strictness of the search relevance filtering. The higher of strictness, the higher of the precision but lower recall of the answer.",
            "format": "int32"
          },
          "endpoint": {
            "type": "string",
            "description": "The name of the Mongo DB cluster endpoint."
          },
          "database_name": {
            "type": "string",
            "description": "The name of the Mongo DB database."
          },
          "collection_name": {
            "type": "string",
            "description": "The name of the Mongo DB Collection."
          },
          "app_name": {
            "type": "string",
            "description": "The name of the Mongo DB Application."
          },
          "index_name": {
            "type": "string",
            "description": "The The name of the Mongo DB index."
          },
          "fields_mapping": {
            "$ref": "#/components/schemas/mongoDBFieldMappingOptions"
          },
          "embedding_dependency": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/onYourDataEndpointVectorizationSource"
              },
              {
                "$ref": "#/components/schemas/onYourDataDeploymentNameVectorizationSource"
              }
            ]
          },
          "include_contexts": {
            "type": "array",
            "description": "The included properties of the output context. If not specified, the default value is `citations` and `intent`.",
            "items": {
              "$ref": "#/components/schemas/onYourDataContextProperty"
            }
          }
        },
        "description": "Parameters to use when configuring Azure OpenAI On Your Data chat extensions when using Mongo DB."
      },
      "mongoDBFieldMappingOptions": {
        "required": [
          "content_fields",
          "vector_fields"
        ],
        "type": "object",
        "properties": {
          "title_field": {
            "type": "string",
            "description": "The name of the index field to use as a title."
          },
          "url_field": {
            "type": "string",
            "description": "The name of the index field to use as a URL."
          },
          "filepath_field": {
            "type": "string",
            "description": "The name of the index field to use as a filepath."
          },
          "content_fields": {
            "type": "array",
            "description": "The names of index fields that should be treated as content.",
            "items": {
              "type": "string"
            }
          },
          "content_fields_separator": {
            "type": "string",
            "description": "The separator pattern that content fields should use."
          },
          "vector_fields": {
            "type": "array",
            "description": "The names of fields that represent vector data.",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Optional settings to control how fields are processed when using a configured Mongo DB resource."
      },
      "pineconeChatExtensionConfiguration": {
        "required": [
          "parameters"
        ],
        "description": "A specific representation of configurable options for Pinecone when using it as an Azure OpenAI chat\nextension.",
        "allOf": [
          {
            "$ref": "#/components/schemas/azureChatExtensionConfiguration"
          },
          {
            "properties": {
              "parameters": {
                "$ref": "#/components/schemas/pineconeChatExtensionParameters"
              }
            }
          }
        ],
        "x-ms-discriminator-value": "pinecone"
      },
      "pineconeChatExtensionParameters": {
        "required": [
          "authentication",
          "embedding_dependency",
          "environment",
          "fields_mapping",
          "index_name"
        ],
        "type": "object",
        "properties": {
          "authentication": {
            "$ref": "#/components/schemas/onYourDataApiKeyAuthenticationOptions"
          },
          "top_n_documents": {
            "type": "integer",
            "description": "The configured top number of documents to feature for the configured query.",
            "format": "int32"
          },
          "max_search_queries": {
            "type": "integer",
            "description": "The max number of rewritten queries should be send to search provider for one user message. If not specified, the system will decide the number of queries to send.",
            "format": "int32"
          },
          "allow_partial_result": {
            "type": "boolean",
            "default": false,
            "description": "If specified as true, the system will allow partial search results to be used and the request fails if all the queries fail. If not specified, or specified as false, the request will fail if any search query fails."
          },
          "in_scope": {
            "type": "boolean",
            "description": "Whether queries should be restricted to use of indexed data."
          },
          "strictness": {
            "maximum": 5,
            "minimum": 1,
            "type": "integer",
            "description": "The configured strictness of the search relevance filtering. The higher of strictness, the higher of the precision but lower recall of the answer.",
            "format": "int32"
          },
          "environment": {
            "type": "string",
            "description": "The environment name of Pinecone."
          },
          "index_name": {
            "type": "string",
            "description": "The name of the Pinecone database index."
          },
          "fields_mapping": {
            "$ref": "#/components/schemas/pineconeFieldMappingOptions"
          },
          "embedding_dependency": {
            "$ref": "#/components/schemas/onYourDataDeploymentNameVectorizationSource"
          },
          "include_contexts": {
            "type": "array",
            "description": "The included properties of the output context. If not specified, the default value is `citations` and `intent`.",
            "items": {
              "$ref": "#/components/schemas/onYourDataContextProperty"
            }
          }
        },
        "description": "Parameters for configuring Azure OpenAI Pinecone chat extensions."
      },
      "pineconeFieldMappingOptions": {
        "required": [
          "content_fields"
        ],
        "type": "object",
        "properties": {
          "title_field": {
            "type": "string",
            "description": "The name of the index field to use as a title."
          },
          "url_field": {
            "type": "string",
            "description": "The name of the index field to use as a URL."
          },
          "filepath_field": {
            "type": "string",
            "description": "The name of the index field to use as a filepath."
          },
          "content_fields": {
            "type": "array",
            "description": "The names of index fields that should be treated as content.",
            "items": {
              "type": "string"
            }
          },
          "content_fields_separator": {
            "type": "string",
            "description": "The separator pattern that content fields should use."
          }
        },
        "description": "Optional settings to control how fields are processed when using a configured Pinecone resource."
      },
      "onYourDataAuthenticationOptions": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/onYourDataAuthenticationType"
          }
        },
        "description": "The authentication options for Azure OpenAI On Your Data.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "api_key": "#/components/schemas/onYourDataApiKeyAuthenticationOptions",
            "connection_string": "#/components/schemas/onYourDataConnectionStringAuthenticationOptions",
            "key_and_key_id": "#/components/schemas/onYourDataKeyAndKeyIdAuthenticationOptions",
            "encoded_api_key": "#/components/schemas/onYourDataEncodedApiKeyAuthenticationOptions",
            "access_token": "#/components/schemas/onYourDataAccessTokenAuthenticationOptions",
            "system_assigned_managed_identity": "#/components/schemas/onYourDataSystemAssignedManagedIdentityAuthenticationOptions",
            "user_assigned_managed_identity": "#/components/schemas/onYourDataUserAssignedManagedIdentityAuthenticationOptions",
            "username_and_password": "#/components/schemas/onYourDataUsernameAndPasswordAuthenticationOptions"
          }
        }
      },
      "onYourDataContextProperty": {
        "type": "string",
        "description": "The context property.",
        "enum": [
          "citations",
          "intent",
          "all_retrieved_documents"
        ],
        "x-ms-enum": {
          "name": "OnYourDataContextProperty",
          "modelAsString": true,
          "values": [
            {
              "name": "citations",
              "value": "citations",
              "description": "The `citations` property."
            },
            {
              "name": "intent",
              "value": "intent",
              "description": "The `intent` property."
            },
            {
              "name": "allRetrievedDocuments",
              "value": "all_retrieved_documents",
              "description": "The `all_retrieved_documents` property."
            }
          ]
        }
      },
      "onYourDataAuthenticationType": {
        "type": "string",
        "description": "The authentication types supported with Azure OpenAI On Your Data.",
        "enum": [
          "api_key",
          "connection_string",
          "key_and_key_id",
          "encoded_api_key",
          "access_token",
          "system_assigned_managed_identity",
          "user_assigned_managed_identity",
          "username_and_password"
        ],
        "x-ms-enum": {
          "name": "OnYourDataAuthenticationType",
          "modelAsString": true,
          "values": [
            {
              "name": "apiKey",
              "value": "api_key",
              "description": "Authentication via API key."
            },
            {
              "name": "connectionString",
              "value": "connection_string",
              "description": "Authentication via connection string."
            },
            {
              "name": "keyAndKeyId",
              "value": "key_and_key_id",
              "description": "Authentication via key and key ID pair."
            },
            {
              "name": "encodedApiKey",
              "value": "encoded_api_key",
              "description": "Authentication via encoded API key."
            },
            {
              "name": "accessToken",
              "value": "access_token",
              "description": "Authentication via access token."
            },
            {
              "name": "systemAssignedManagedIdentity",
              "value": "system_assigned_managed_identity",
              "description": "Authentication via system-assigned managed identity."
            },
            {
              "name": "userAssignedManagedIdentity",
              "value": "user_assigned_managed_identity",
              "description": "Authentication via user-assigned managed identity."
            },
            {
              "name": "usernameAndPassword",
              "value": "username_and_password",
              "description": "Authentication via username and password."
            }
          ]
        }
      },
      "onYourDataApiKeyAuthenticationOptions": {
        "required": [
          "key"
        ],
        "description": "The authentication options for Azure OpenAI On Your Data when using an API key.",
        "allOf": [
          {
            "$ref": "#/components/schemas/onYourDataAuthenticationOptions"
          },
          {
            "properties": {
              "key": {
                "type": "string",
                "description": "The API key to use for authentication."
              }
            }
          }
        ],
        "x-ms-discriminator-value": "api_key"
      },
      "onYourDataConnectionStringAuthenticationOptions": {
        "required": [
          "connection_string"
        ],
        "description": "The authentication options for Azure OpenAI On Your Data when using a connection string.",
        "allOf": [
          {
            "$ref": "#/components/schemas/onYourDataAuthenticationOptions"
          },
          {
            "properties": {
              "connection_string": {
                "type": "string",
                "description": "The connection string to use for authentication."
              }
            }
          }
        ],
        "x-ms-discriminator-value": "connection_string"
      },
      "onYourDataKeyAndKeyIdAuthenticationOptions": {
        "required": [
          "key",
          "key_id"
        ],
        "description": "The authentication options for Azure OpenAI On Your Data when using an Elasticsearch key and key ID pair.",
        "allOf": [
          {
            "$ref": "#/components/schemas/onYourDataAuthenticationOptions"
          },
          {
            "properties": {
              "key": {
                "type": "string",
                "description": "The Elasticsearch key to use for authentication."
              },
              "key_id": {
                "type": "string",
                "description": "The Elasticsearch key ID to use for authentication."
              }
            }
          }
        ],
        "x-ms-discriminator-value": "key_and_key_id"
      },
      "onYourDataEncodedApiKeyAuthenticationOptions": {
        "required": [
          "encoded_api_key"
        ],
        "description": "The authentication options for Azure OpenAI On Your Data when using an Elasticsearch encoded API key.",
        "allOf": [
          {
            "$ref": "#/components/schemas/onYourDataAuthenticationOptions"
          },
          {
            "properties": {
              "encoded_api_key": {
                "type": "string",
                "description": "The Elasticsearch encoded API key to use for authentication."
              }
            }
          }
        ],
        "x-ms-discriminator-value": "encoded_api_key"
      },
      "onYourDataAccessTokenAuthenticationOptions": {
        "required": [
          "access_token"
        ],
        "description": "The authentication options for Azure OpenAI On Your Data when using access token.",
        "allOf": [
          {
            "$ref": "#/components/schemas/onYourDataAuthenticationOptions"
          },
          {
            "properties": {
              "access_token": {
                "type": "string",
                "description": "The access token to use for authentication."
              }
            }
          }
        ],
        "x-ms-discriminator-value": "access_token"
      },
      "onYourDataSystemAssignedManagedIdentityAuthenticationOptions": {
        "description": "The authentication options for Azure OpenAI On Your Data when using a system-assigned managed identity.",
        "allOf": [
          {
            "$ref": "#/components/schemas/onYourDataAuthenticationOptions"
          }
        ],
        "x-ms-discriminator-value": "system_assigned_managed_identity"
      },
      "onYourDataUserAssignedManagedIdentityAuthenticationOptions": {
        "required": [
          "managed_identity_resource_id"
        ],
        "description": "The authentication options for Azure OpenAI On Your Data when using a user-assigned managed identity.",
        "allOf": [
          {
            "$ref": "#/components/schemas/onYourDataAuthenticationOptions"
          },
          {
            "properties": {
              "managed_identity_resource_id": {
                "type": "string",
                "description": "The resource ID of the user-assigned managed identity to use for authentication."
              }
            }
          }
        ],
        "x-ms-discriminator-value": "user_assigned_managed_identity"
      },
      "onYourDataUsernameAndPasswordAuthenticationOptions": {
        "required": [
          "username",
          "password"
        ],
        "description": "The authentication options for Azure OpenAI On Your Data when using a username and a password.",
        "allOf": [
          {
            "$ref": "#/components/schemas/onYourDataAuthenticationOptions"
          },
          {
            "properties": {
              "username": {
                "type": "string",
                "description": "The username to use for authentication."
              },
              "password": {
                "type": "string",
                "description": "The password. to use for authentication."
              }
            }
          }
        ],
        "x-ms-discriminator-value": "username_and_password"
      },
      "onYourDataVectorizationSource": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/onYourDataVectorizationSourceType"
          }
        },
        "description": "An abstract representation of a vectorization source for Azure OpenAI On Your Data with vector search.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "endpoint": "#/components/schemas/onYourDataEndpointVectorizationSource",
            "deployment_name": "#/components/schemas/onYourDataDeploymentNameVectorizationSource",
            "integrated": "#/components/schemas/onYourDataIntegratedVectorizationSource",
            "model_id": "#/components/schemas/onYourDataModelIdVectorizationSource"
          }
        }
      },
      "onYourDataVectorizationSourceType": {
        "type": "string",
        "description": "Represents the available sources Azure OpenAI On Your Data can use to configure vectorization of data for use with\nvector search.",
        "enum": [
          "endpoint",
          "deployment_name",
          "integrated",
          "model_id"
        ],
        "x-ms-enum": {
          "name": "OnYourDataVectorizationSourceType",
          "modelAsString": true,
          "values": [
            {
              "name": "endpoint",
              "value": "endpoint",
              "description": "Represents vectorization performed by public service calls to an Azure OpenAI embedding model."
            },
            {
              "name": "deploymentName",
              "value": "deployment_name",
              "description": "Represents an Ada model deployment name to use. This model deployment must be in the same Azure OpenAI resource, but\nOn Your Data will use this model deployment via an internal call rather than a public one, which enables vector\nsearch even in private networks."
            },
            {
              "name": "integrated",
              "value": "integrated",
              "description": "Represents the integrated vectorizer defined within the search resource."
            },
            {
              "name": "modelId",
              "value": "model_id",
              "description": "Represents a specific embedding model ID as defined in the search service.\nCurrently only supported by Elasticsearch®."
            }
          ]
        }
      },
      "onYourDataEndpointVectorizationSource": {
        "required": [
          "authentication",
          "endpoint"
        ],
        "description": "The details of a a vectorization source, used by Azure OpenAI On Your Data when applying vector search, that is based\non a public Azure OpenAI endpoint call for embeddings.",
        "allOf": [
          {
            "$ref": "#/components/schemas/onYourDataVectorizationSource"
          },
          {
            "properties": {
              "endpoint": {
                "type": "string",
                "description": "Specifies the resource endpoint URL from which embeddings should be retrieved. It should be in the format of https://YOUR_RESOURCE_NAME.openai.azure.com/openai/deployments/YOUR_DEPLOYMENT_NAME/embeddings. The api-version query parameter is not allowed.",
                "format": "uri"
              },
              "authentication": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/onYourDataApiKeyAuthenticationOptions"
                  },
                  {
                    "$ref": "#/components/schemas/onYourDataAccessTokenAuthenticationOptions"
                  }
                ]
              },
              "dimensions": {
                "type": "integer",
                "description": "The number of dimensions the embeddings should have. Only supported in `text-embedding-3` and later models.",
                "format": "int32"
              }
            }
          }
        ],
        "x-ms-discriminator-value": "endpoint"
      },
      "onYourDataDeploymentNameVectorizationSource": {
        "required": [
          "deployment_name"
        ],
        "description": "The details of a a vectorization source, used by Azure OpenAI On Your Data when applying vector search, that is based\non an internal embeddings model deployment name in the same Azure OpenAI resource.",
        "allOf": [
          {
            "$ref": "#/components/schemas/onYourDataVectorizationSource"
          },
          {
            "properties": {
              "deployment_name": {
                "type": "string",
                "description": "Specifies the name of the model deployment to use for vectorization. This model deployment must be in the same Azure OpenAI resource, but On Your Data will use this model deployment via an internal call rather than a public one, which enables vector search even in private networks."
              },
              "dimensions": {
                "type": "integer",
                "description": "The number of dimensions the embeddings should have. Only supported in `text-embedding-3` and later models.",
                "format": "int32"
              }
            }
          }
        ],
        "x-ms-discriminator-value": "deployment_name"
      },
      "onYourDataIntegratedVectorizationSource": {
        "description": "Represents the integrated vectorizer defined within the search resource.",
        "allOf": [
          {
            "$ref": "#/components/schemas/onYourDataVectorizationSource"
          }
        ],
        "x-ms-discriminator-value": "integrated"
      },
      "onYourDataModelIdVectorizationSource": {
        "required": [
          "model_id"
        ],
        "description": "The details of a a vectorization source, used by Azure OpenAI On Your Data when applying vector search, that is based\non a search service model ID. Currently only supported by Elasticsearch®.",
        "allOf": [
          {
            "$ref": "#/components/schemas/onYourDataVectorizationSource"
          },
          {
            "properties": {
              "model_id": {
                "type": "string",
                "description": "Specifies the model ID to use for vectorization. This model ID must be defined in the search service."
              }
            }
          }
        ],
        "x-ms-discriminator-value": "model_id"
      },
      "azureChatExtensionsMessageContext": {
        "type": "object",
        "properties": {
          "citations": {
            "type": "array",
            "description": "The data source retrieval result, used to generate the assistant message in the response.",
            "items": {
              "$ref": "#/components/schemas/citation"
            },
            "x-ms-identifiers": []
          },
          "intent": {
            "type": "string",
            "description": "The detected intent from the chat history, used to pass to the next turn to carry over the context."
          },
          "all_retrieved_documents": {
            "type": "array",
            "description": "All the retrieved documents.",
            "items": {
              "$ref": "#/components/schemas/retrievedDocument"
            }
          }
        },
        "description": "  A representation of the additional context information available when Azure OpenAI chat extensions are involved\n  in the generation of a corresponding chat completions response. This context information is only populated when\n  using an Azure OpenAI request configured to use a matching extension."
      },
      "citation": {
        "required": [
          "content"
        ],
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "The content of the citation."
          },
          "title": {
            "type": "string",
            "description": "The title of the citation."
          },
          "url": {
            "type": "string",
            "description": "The URL of the citation."
          },
          "filepath": {
            "type": "string",
            "description": "The file path of the citation."
          },
          "chunk_id": {
            "type": "string",
            "description": "The chunk ID of the citation."
          },
          "rerank_score": {
            "type": "number",
            "description": "The rerank score of the retrieved document.",
            "format": "double"
          }
        },
        "description": "citation information for a chat completions response message."
      },
      "retrievedDocument": {
        "type": "object",
        "description": "The retrieved document.",
        "required": [
          "search_queries",
          "data_source_index",
          "original_search_score"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/citation"
          },
          {
            "properties": {
              "search_queries": {
                "type": "array",
                "description": "The search queries used to retrieve the document.",
                "items": {
                  "type": "string"
                }
              },
              "data_source_index": {
                "type": "integer",
                "description": "The index of the data source.",
                "format": "int32"
              },
              "original_search_score": {
                "type": "number",
                "description": "The original search score of the retrieved document.",
                "format": "double"
              },
              "filter_reason": {
                "$ref": "#/components/schemas/filterReason",
                "description": "Represents the rationale for filtering the document. If the document does not undergo filtering, this field will remain unset."
              }
            }
          }
        ]
      },
      "filterReason": {
        "type": "string",
        "description": "The filtering reason of the retrieved document.",
        "enum": [
          "score",
          "rerank"
        ],
        "x-ms-enum": {
          "name": "FilterReason",
          "modelAsString": true,
          "values": [
            {
              "name": "score",
              "value": "score",
              "description": "The document is filtered by original search score threshold defined by `strictness` configure."
            },
            {
              "name": "rerank",
              "value": "rerank",
              "description": "The document is not filtered by original search score threshold, but is filtered by rerank score and `top_n_documents` configure."
            }
          ]
        }
      },
      "chatCompletionMessageToolCall": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the tool call."
          },
          "type": {
            "$ref": "#/components/schemas/toolCallType"
          },
          "function": {
            "type": "object",
            "description": "The function that the model called.",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the function to call."
              },
              "arguments": {
                "type": "string",
                "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."
              }
            },
            "required": [
              "name",
              "arguments"
            ]
          }
        },
        "required": [
          "id",
          "type",
          "function"
        ]
      },
      "toolCallType": {
        "type": "string",
        "enum": [
          "function"
        ],
        "description": "The type of the tool call, in this case `function`.",
        "x-ms-enum": {
          "name": "ToolCallType",
          "modelAsString": true,
          "values": [
            {
              "value": "function",
              "description": "The tool call type is function."
            }
          ]
        }
      },
      "chatCompletionRequestMessageTool": {
        "allOf": [
          {
            "$ref": "#/components/schemas/chatCompletionRequestMessage"
          },
          {
            "type": "object",
            "nullable": true,
            "properties": {
              "tool_call_id": {
                "type": "string",
                "description": "Tool call that this message is responding to."
              },
              "content": {
                "type": "string",
                "description": "The contents of the message.",
                "nullable": true
              }
            }
          }
        ],
        "required": [
          "tool_call_id",
          "content"
        ]
      },
      "chatCompletionRequestMessageFunction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/chatCompletionRequestMessage"
          },
          {
            "type": "object",
            "description": "Deprecated. Message that represents a function.",
            "nullable": true,
            "properties": {
              "role": {
                "type": "string",
                "enum": [
                  "function"
                ],
                "description": "The role of the messages author, in this case `function`."
              },
              "name": {
                "type": "string",
                "description": "The contents of the message."
              },
              "content": {
                "type": "string",
                "description": "The contents of the message.",
                "nullable": true
              }
            }
          }
        ],
        "required": [
          "function_call_id",
          "content"
        ]
      },
      "createChatCompletionResponse": {
        "type": "object",
        "description": "Represents a chat completion response returned by model, based on the provided input.",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier for the chat completion."
          },
          "prompt_filter_results": {
            "$ref": "#/components/schemas/promptFilterResults"
          },
          "choices": {
            "type": "array",
            "description": "A list of chat completion choices. Can be more than one if `n` is greater than 1.",
            "items": {
              "type": "object",
              "required": [
                "finish_reason",
                "index",
                "message",
                "logprobs"
              ],
              "properties": {
                "finish_reason": {
                  "type": "string",
                  "description": "The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,\n`length` if the maximum number of tokens specified in the request was reached,\n`content_filter` if content was omitted due to a flag from our content filters,\n`tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.\n",
                  "enum": [
                    "stop",
                    "length",
                    "tool_calls",
                    "content_filter",
                    "function_call"
                  ]
                },
                "index": {
                  "type": "integer",
                  "description": "The index of the choice in the list of choices."
                },
                "message": {
                  "$ref": "#/components/schemas/chatCompletionResponseMessage"
                },
                "content_filter_results": {
                  "$ref": "#/components/schemas/contentFilterChoiceResults"
                },
                "logprobs": {
                  "description": "Log probability information for the choice.",
                  "type": "object",
                  "nullable": true,
                  "properties": {
                    "content": {
                      "description": "A list of message content tokens with log probability information.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/chatCompletionTokenLogprob"
                      },
                      "nullable": true
                    },
                    "refusal": {
                      "description": "A list of message refusal tokens with log probability information.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/chatCompletionTokenLogprob"
                      },
                      "nullable": true
                    }
                  },
                  "required": [
                    "content",
                    "refusal"
                  ]
                }
              }
            }
          },
          "created": {
            "type": "integer",
            "description": "The Unix timestamp (in seconds) of when the chat completion was created."
          },
          "model": {
            "type": "string",
            "description": "The model used for the chat completion."
          },
          "system_fingerprint": {
            "type": "string",
            "description": "This fingerprint represents the backend configuration that the model runs with.\n\nCan be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.\n"
          },
          "object": {
            "type": "string",
            "description": "The object type, which is always `chat.completion`.",
            "enum": [
              "chat.completion"
            ]
          },
          "usage": {
            "$ref": "#/components/schemas/completionUsage"
          }
        },
        "required": [
          "choices",
          "created",
          "id",
          "model",
          "object"
        ]
      },
      "createChatCompletionStreamResponse": {
        "type": "object",
        "description": "Represents a streamed chunk of a chat completion response returned by model, based on the provided input.",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier for the chat completion. Each chunk has the same ID."
          },
          "choices": {
            "type": "array",
            "description": "A list of chat completion choices. Can contain more than one elements if `n` is greater than 1.\n",
            "items": {
              "type": "object",
              "required": [
                "delta",
                "finish_reason",
                "index"
              ],
              "properties": {
                "delta": {
                  "$ref": "#/components/schemas/chatCompletionStreamResponseDelta"
                },
                "logprobs": {
                  "description": "Log probability information for the choice.",
                  "type": "object",
                  "nullable": true,
                  "properties": {
                    "content": {
                      "description": "A list of message content tokens with log probability information.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/chatCompletionTokenLogprob"
                      },
                      "nullable": true
                    },
                    "refusal": {
                      "description": "A list of message refusal tokens with log probability information.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/chatCompletionTokenLogprob"
                      },
                      "nullable": true
                    }
                  },
                  "required": [
                    "content",
                    "refusal"
                  ]
                },
                "finish_reason": {
                  "type": "string",
                  "description": "The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,\n`length` if the maximum number of tokens specified in the request was reached,\n`content_filter` if content was omitted due to a flag from our content filters,\n`tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.\n",
                  "enum": [
                    "stop",
                    "length",
                    "tool_calls",
                    "content_filter",
                    "function_call"
                  ],
                  "nullable": true
                },
                "index": {
                  "type": "integer",
                  "description": "The index of the choice in the list of choices."
                }
              }
            }
          },
          "created": {
            "type": "integer",
            "description": "The Unix timestamp (in seconds) of when the chat completion was created. Each chunk has the same timestamp."
          },
          "model": {
            "type": "string",
            "description": "The model to generate the completion."
          },
          "system_fingerprint": {
            "type": "string",
            "description": "This fingerprint represents the backend configuration that the model runs with.\nCan be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.\n"
          },
          "object": {
            "type": "string",
            "description": "The object type, which is always `chat.completion.chunk`.",
            "enum": [
              "chat.completion.chunk"
            ],
            "required": [
              "prompt_tokens",
              "completion_tokens",
              "total_tokens"
            ]
          }
        },
        "required": [
          "choices",
          "created",
          "id",
          "model",
          "object"
        ]
      },
      "chatCompletionStreamResponseDelta": {
        "type": "object",
        "description": "A chat completion delta generated by streamed model responses.",
        "properties": {
          "content": {
            "type": "string",
            "description": "The contents of the chunk message.",
            "nullable": true
          },
          "function_call": {
            "deprecated": true,
            "type": "object",
            "description": "Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.",
            "properties": {
              "arguments": {
                "type": "string",
                "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."
              },
              "name": {
                "type": "string",
                "description": "The name of the function to call."
              }
            }
          },
          "tool_calls": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/chatCompletionMessageToolCallChunk"
            }
          },
          "role": {
            "type": "string",
            "enum": [
              "system",
              "user",
              "assistant",
              "tool"
            ],
            "description": "The role of the author of this message."
          },
          "refusal": {
            "type": "string",
            "description": "The refusal message generated by the model.",
            "nullable": true
          }
        }
      },
      "chatCompletionMessageToolCallChunk": {
        "type": "object",
        "properties": {
          "index": {
            "type": "integer"
          },
          "id": {
            "type": "string",
            "description": "The ID of the tool call."
          },
          "type": {
            "type": "string",
            "enum": [
              "function"
            ],
            "description": "The type of the tool. Currently, only `function` is supported."
          },
          "function": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the function to call."
              },
              "arguments": {
                "type": "string",
                "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."
              }
            }
          }
        },
        "required": [
          "index"
        ]
      },
      "chatCompletionStreamOptions": {
        "description": "Options for streaming response. Only set this when you set `stream: true`.\n",
        "type": "object",
        "nullable": true,
        "default": null,
        "properties": {
          "include_usage": {
            "type": "boolean",
            "description": "If set, an additional chunk will be streamed before the `data: [DONE]` message. The `usage` field on this chunk shows the token usage statistics for the entire request, and the `choices` field will always be an empty array. All other chunks will also include a `usage` field, but with a null value.\n"
          }
        }
      },
      "chatCompletionChoiceLogProbs": {
        "description": "Log probability information for the choice.",
        "type": "object",
        "nullable": true,
        "properties": {
          "content": {
            "description": "A list of message content tokens with log probability information.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/chatCompletionTokenLogprob"
            },
            "nullable": true
          },
          "refusal": {
            "description": "A list of message refusal tokens with log probability information.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/chatCompletionTokenLogprob"
            },
            "nullable": true
          }
        },
        "required": [
          "content"
        ]
      },
      "chatCompletionTokenLogprob": {
        "type": "object",
        "properties": {
          "token": {
            "description": "The token.",
            "type": "string"
          },
          "logprob": {
            "description": "The log probability of this token.",
            "type": "number"
          },
          "bytes": {
            "description": "A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.",
            "type": "array",
            "items": {
              "type": "integer"
            },
            "nullable": true
          },
          "top_logprobs": {
            "description": "List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "token": {
                  "description": "The token.",
                  "type": "string"
                },
                "logprob": {
                  "description": "The log probability of this token.",
                  "type": "number"
                },
                "bytes": {
                  "description": "A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.",
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "nullable": true
                }
              },
              "required": [
                "token",
                "logprob",
                "bytes"
              ]
            }
          }
        },
        "required": [
          "token",
          "logprob",
          "bytes",
          "top_logprobs"
        ]
      },
      "chatCompletionResponseMessage": {
        "type": "object",
        "description": "A chat completion message generated by the model.",
        "properties": {
          "role": {
            "$ref": "#/components/schemas/chatCompletionResponseMessageRole"
          },
          "refusal": {
            "type": "string",
            "description": "The refusal message generated by the model.",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "The contents of the message.",
            "nullable": true
          },
          "tool_calls": {
            "type": "array",
            "description": "The tool calls generated by the model, such as function calls.",
            "items": {
              "$ref": "#/components/schemas/chatCompletionMessageToolCall"
            }
          },
          "function_call": {
            "$ref": "#/components/schemas/chatCompletionFunctionCall"
          },
          "context": {
            "$ref": "#/components/schemas/azureChatExtensionsMessageContext"
          }
        },
        "required": [
          "role",
          "content",
          "refusal"
        ]
      },
      "chatCompletionResponseMessageRole": {
        "type": "string",
        "enum": [
          "assistant"
        ],
        "description": "The role of the author of the response message."
      },
      "chatCompletionToolChoiceOption": {
        "description": "Controls which (if any) tool is called by the model. `none` means the model will not call any tool and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools. Specifying a particular tool via `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool. `none` is the default when no tools are present. `auto` is the default if tools are present.",
        "oneOf": [
          {
            "type": "string",
            "description": "`none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.",
            "enum": [
              "none",
              "auto",
              "required"
            ]
          },
          {
            "$ref": "#/components/schemas/chatCompletionNamedToolChoice"
          }
        ]
      },
      "chatCompletionNamedToolChoice": {
        "type": "object",
        "description": "Specifies a tool the model should use. Use to force the model to call a specific function.",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "function"
            ],
            "description": "The type of the tool. Currently, only `function` is supported."
          },
          "function": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the function to call."
              }
            },
            "required": [
              "name"
            ]
          }
        },
        "required": [
          "type",
          "function"
        ]
      },
      "chatCompletionMessageToolCalls": {
        "type": "array",
        "description": "The tool calls generated by the model, such as function calls.",
        "items": {
          "$ref": "#/components/schemas/chatCompletionMessageToolCall"
        }
      },
      "chatCompletionFunctionCall": {
        "type": "object",
        "description": "Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the function to call."
          },
          "arguments": {
            "type": "string",
            "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."
          }
        },
        "required": [
          "name",
          "arguments"
        ]
      },
      "completionUsage": {
        "type": "object",
        "description": "Usage statistics for the completion request.",
        "properties": {
          "prompt_tokens": {
            "type": "integer",
            "description": "Number of tokens in the prompt."
          },
          "completion_tokens": {
            "type": "integer",
            "description": "Number of tokens in the generated completion."
          },
          "total_tokens": {
            "type": "integer",
            "description": "Total number of tokens used in the request (prompt + completion)."
          }
        },
        "required": [
          "prompt_tokens",
          "completion_tokens",
          "total_tokens"
        ]
      },
      "chatCompletionTool": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "function"
            ],
            "description": "The type of the tool. Currently, only `function` is supported."
          },
          "function": {
            "$ref": "#/components/schemas/FunctionObject"
          }
        },
        "required": [
          "type",
          "function"
        ]
      },
      "FunctionParameters": {
        "type": "object",
        "description": "The parameters the functions accepts, described as a JSON Schema object. See the guide](https://learn.microsoft.com/en-us/azure/ai-services/openai/how-to/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. \n\nOmitting `parameters` defines a function with an empty parameter list.",
        "additionalProperties": true
      },
      "FunctionObject": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A description of what the function does, used by the model to choose when and how to call the function."
          },
          "name": {
            "type": "string",
            "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
          },
          "parameters": {
            "$ref": "#/components/schemas/FunctionParameters"
          },
          "strict": {
            "type": "boolean",
            "nullable": true,
            "default": false,
            "description": "Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](docs/guides/function-calling)."
          }
        },
        "required": [
          "name"
        ]
      },
      "ResponseFormatText": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of response format being defined: `text`",
            "enum": [
              "text"
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "ResponseFormatJsonObject": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of response format being defined: `json_object`",
            "enum": [
              "json_object"
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "ResponseFormatJsonSchemaSchema": {
        "type": "object",
        "description": "The schema for the response format, described as a JSON Schema object.",
        "additionalProperties": true
      },
      "ResponseFormatJsonSchema": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of response format being defined: `json_schema`",
            "enum": [
              "json_schema"
            ]
          },
          "json_schema": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "A description of what the response format is for, used by the model to determine how to respond in the format."
              },
              "name": {
                "type": "string",
                "description": "The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
              },
              "schema": {
                "$ref": "#/components/schemas/ResponseFormatJsonSchemaSchema"
              },
              "strict": {
                "type": "boolean",
                "nullable": true,
                "default": false,
                "description": "Whether to enable strict schema adherence when generating the output. If set to true, the model will always follow the exact schema defined in the `schema` field. Only a subset of JSON Schema is supported when `strict` is `true`."
              }
            },
            "required": [
              "type",
              "name"
            ]
          }
        },
        "required": [
          "type",
          "json_schema"
        ]
      },
      "chatCompletionChoiceCommon": {
        "type": "object",
        "properties": {
          "index": {
            "type": "integer"
          },
          "finish_reason": {
            "type": "string"
          }
        }
      },
      "createTranslationRequest": {
        "type": "object",
        "description": "Translation request.",
        "properties": {
          "file": {
            "type": "string",
            "description": "The audio file to translate.",
            "format": "binary"
          },
          "prompt": {
            "type": "string",
            "description": "An optional text to guide the model's style or continue a previous audio segment. The prompt should be in English."
          },
          "response_format": {
            "$ref": "#/components/schemas/audioResponseFormat"
          },
          "temperature": {
            "type": "number",
            "default": 0,
            "description": "The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use log probability to automatically increase the temperature until certain thresholds are hit."
          }
        },
        "required": [
          "file"
        ]
      },
      "audioResponse": {
        "description": "Translation or transcription response when response_format was json",
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "Translated or transcribed text."
          }
        },
        "required": [
          "text"
        ]
      },
      "audioVerboseResponse": {
        "description": "Translation or transcription response when response_format was verbose_json",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/audioResponse"
          },
          {
            "properties": {
              "task": {
                "type": "string",
                "description": "Type of audio task.",
                "enum": [
                  "transcribe",
                  "translate"
                ],
                "x-ms-enum": {
                  "modelAsString": true
                }
              },
              "language": {
                "type": "string",
                "description": "Language."
              },
              "duration": {
                "type": "number",
                "description": "Duration."
              },
              "segments": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/audioSegment"
                }
              },
              "words": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/audioWord"
                }
              }
            }
          }
        ],
        "required": [
          "text"
        ]
      },
      "audioResponseFormat": {
        "title": "AudioResponseFormat",
        "description": "Defines the format of the output.",
        "enum": [
          "json",
          "text",
          "srt",
          "verbose_json",
          "vtt"
        ],
        "type": "string",
        "x-ms-enum": {
          "modelAsString": true
        }
      },
      "createTranscriptionRequest": {
        "type": "object",
        "description": "Transcription request.",
        "properties": {
          "file": {
            "type": "string",
            "description": "The audio file object to transcribe.",
            "format": "binary"
          },
          "prompt": {
            "type": "string",
            "description": "An optional text to guide the model's style or continue a previous audio segment. The prompt should match the audio language."
          },
          "response_format": {
            "$ref": "#/components/schemas/audioResponseFormat"
          },
          "temperature": {
            "type": "number",
            "default": 0,
            "description": "The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use log probability to automatically increase the temperature until certain thresholds are hit."
          },
          "language": {
            "type": "string",
            "description": "The language of the input audio. Supplying the input language in ISO-639-1 format will improve accuracy and latency."
          },
          "timestamp_granularities[]": {
            "type": "array",
            "description": "The timestamp granularities to populate for this transcription. `response_format` must be set `verbose_json` to use timestamp granularities. Either or both of these options are supported: `word`, or `segment`. Note: There is no additional latency for segment timestamps, but generating word timestamps incurs additional latency.",
            "items": {
              "type": "string",
              "enum": [
                "word",
                "segment"
              ]
            },
            "default": [
              "segment"
            ]
          }
        },
        "required": [
          "file"
        ]
      },
      "audioSegment": {
        "type": "object",
        "description": "Transcription or translation segment.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Segment identifier."
          },
          "seek": {
            "type": "number",
            "description": "Offset of the segment."
          },
          "start": {
            "type": "number",
            "description": "Segment start offset."
          },
          "end": {
            "type": "number",
            "description": "Segment end offset."
          },
          "text": {
            "type": "string",
            "description": "Segment text."
          },
          "tokens": {
            "type": "array",
            "items": {
              "type": "number",
              "nullable": false
            },
            "description": "Tokens of the text."
          },
          "temperature": {
            "type": "number",
            "description": "Temperature."
          },
          "avg_logprob": {
            "type": "number",
            "description": "Average log probability."
          },
          "compression_ratio": {
            "type": "number",
            "description": "Compression ratio."
          },
          "no_speech_prob": {
            "type": "number",
            "description": "Probability of 'no speech'."
          }
        }
      },
      "audioWord": {
        "type": "object",
        "description": "Transcription or translation word.",
        "properties": {
          "word": {
            "type": "string",
            "description": "Word"
          },
          "start": {
            "type": "number",
            "description": "Word start offset."
          },
          "end": {
            "type": "number",
            "description": "Word end offset."
          }
        }
      },
      "createSpeechRequest": {
        "type": "object",
        "description": "Speech request.",
        "properties": {
          "input": {
            "type": "string",
            "description": "The text to synthesize audio for. The maximum length is 4096 characters.",
            "maxLength": 4096
          },
          "voice": {
            "type": "string",
            "description": "The voice to use for speech synthesis.",
            "enum": [
              "alloy",
              "echo",
              "fable",
              "onyx",
              "nova",
              "shimmer"
            ]
          },
          "response_format": {
            "type": "string",
            "description": "The format to synthesize the audio in.",
            "enum": [
              "mp3",
              "opus",
              "aac",
              "flac",
              "wav",
              "pcm"
            ]
          },
          "speed": {
            "description": "The speed of the synthesize audio. Select a value from `0.25` to `4.0`. `1.0` is the default.",
            "type": "number",
            "default": 1.0,
            "minimum": 0.25,
            "maximum": 4.0
          }
        },
        "required": [
          "input",
          "voice"
        ]
      }
    },
    "securitySchemes": {
      "bearer": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/v2.0/authorize",
            "scopes": {}
          }
        },
        "x-tokenInfoFunc": "api.middleware.auth.bearer_auth",
        "x-scopeValidateFunc": "api.middleware.auth.validate_scopes"
      },
      "apiKey": {
        "type": "apiKey",
        "name": "api-key",
        "in": "header"
      }
    }
  }
}